kind = sequential
title = "ETC.A Controller"
size = [-64, -64, 64, 64]
copy_solution_to_factory = "ETCA/Controller"
input_labels = ["Op Code", "Is Jump"]
output_labels = ["Load", "Store", "Read CR", "Write CR", "Sign Extend Imm", "Write Result", "ALU OP"]
background = 6
components_available = [com_on: -1, com_off: -1, com_and_bit: -1, com_and_3_bit: -1, com_switch_bit: -1, com_switch_word: -1, com_add: -1, com_constant: -1, com_equal: -1, com_less_s: -1, com_less_u: -1, com_mux: -1, com_nand_word: -1, com_not_word: -1, com_lsl: -1, com_lsr: -1, com_asr: -1, com_rol: -1, com_ror: -1, com_xor_word: -1, com_xnor_word: -1, com_counter: -1, com_decoder_1: -1, com_decoder_2: -1, com_decoder_3: -1, com_div: -1, com_mod: -1, com_delay_line_bit: -1, com_splitter_bit_2: -1, com_splitter_bit_4: -1, com_splitter_bit_8: -1, com_maker_bit_2: -1, com_maker_bit_4: -1, com_maker_bit_8: -1, com_full_adder: -1, com_mul: -1, com_nand_bit: -1, com_nor_bit: -1, com_not_bit: -1, com_splitter_word_2: -1, com_splitter_word_4: -1, com_splitter_word_8: -1, com_maker_word_2: -1, com_maker_word_4: -1, com_maker_word_8: -1, com_static_indexer: -1, com_static_indexer_config: -1, com_concatenator_2: -1, com_concatenator_4: -1, com_concatenator_8: -1, com_or_bit: -1, com_or_3_bit: -1, com_or_word: -1, com_and_word: -1, com_nor_word: -1, com_register_word: -1, com_delay_line_word: -1, com_register_bit: -1, com_inc: -1, com_neg: -1, com_xnor_bit: -1, com_xor_bit: -1, com_cc_input: -1, com_cc_output: -1]

dialogue = [
  (info, `Make a controller for the base ETC.A operations.
[code]
0000 ADD     WriteResult, SignExtendImm
0001 SUB     WriteResult, SignExtendImm
0010 RSUB    WriteResult, SignExtendImm
0011 CMP     SignExtendImm
0100 OR      WriteResult, SignExtendImm
0101 XOR     WriteResult, SignExtendImm
0110 AND     WriteResult, SignExtendImm
0111 TEST    SignExtendImm
1000 MOVZ    WriteResult
1001 MOV     WriteResult, SignExtendImm
1010 LOAD    WriteResult, Load, NotAluOp
1011 Store   Store, NotAluOp
1100 SLO     WriteResult
1101 reserv  doesn't matter
1110 READCR  WriteResult, ReadCR, NotAluOp
1111 WRITECR WriteCR, NotAluOp
[/code]

Do not output these if 'Is Jump':
[code]
Write Result
Write CR
Store
[/code]
`)]
