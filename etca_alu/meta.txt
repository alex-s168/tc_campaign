kind = sequential
title = "ETC.A ALU"
size = [-64, -64, 64, 64]
copy_solution_to_factory = "ETCA/ALU"
input_labels = ["OpCode", "Operand A", "Operand B"]
output_labels = ["Result",
                 "Zero", "Negative", "Carry", "Overflow",
                 "Overwrite ZN", "Overwrite CV"]
input_values = [("ADD","SUB","RSUB","CMP","OR","XOR","AND","TEST","MOVZ","MOV","invalid","invalid","SLO","invalid","invalid","invalid")]
background = 6
components_available = [com_on: -1, com_off: -1, com_and_bit: -1, com_and_3_bit: -1, com_switch_bit: -1, com_switch_word: -1, com_add: -1, com_constant: -1, com_equal: -1, com_less_s: -1, com_less_u: -1, com_mux: -1, com_nand_word: -1, com_not_word: -1, com_lsl: -1, com_lsr: -1, com_asr: -1, com_rol: -1, com_ror: -1, com_xor_word: -1, com_xnor_word: -1, com_counter: -1, com_decoder_1: -1, com_decoder_2: -1, com_decoder_3: -1, com_div: -1, com_mod: -1, com_delay_line_bit: -1, com_splitter_bit_2: -1, com_splitter_bit_4: -1, com_splitter_bit_8: -1, com_maker_bit_2: -1, com_maker_bit_4: -1, com_maker_bit_8: -1, com_full_adder: -1, com_mul: -1, com_nand_bit: -1, com_nor_bit: -1, com_not_bit: -1, com_splitter_word_2: -1, com_splitter_word_4: -1, com_splitter_word_8: -1, com_maker_word_2: -1, com_maker_word_4: -1, com_maker_word_8: -1, com_static_indexer: -1, com_static_indexer_config: -1, com_concatenator_2: -1, com_concatenator_4: -1, com_concatenator_8: -1, com_or_bit: -1, com_or_3_bit: -1, com_or_word: -1, com_and_word: -1, com_nor_word: -1, com_register_word: -1, com_delay_line_word: -1, com_register_bit: -1, com_inc: -1, com_neg: -1, com_xnor_bit: -1, com_xor_bit: -1, com_cc_input: -1, com_cc_output: -1]

dialogue = [
  (info, `Make the ALU for your ETCA CPU.

The output does not matter for any other OpCodes than the ones listed below:
[code]
0000 ADD     out = A + B  (ZN CV)
0001 SUB     out = A - B  (ZN CV)
0010 RSUB    out = B - A  (ZN CV)
0011 CMP     _   = A - B  (ZN CV)
0100 OR      out = A | B  (ZN AnyCV)
0101 XOR     out = A ^ B  (ZN AnyCV)
0110 AND     out = A & B  (ZN AnyCV)
0111 TEST    _   = A & B  (ZN AnyCV)
1000 MOVZ    out = B
1001 MOV     out = B
1100 SLO     out = A << 5 | B
[/code]
(if it assigns to '_', it means that the output does not matter)
(if a OpCode is AnyCV, you can output whatever you want for 'Overwrite CV')

The output of 'Zero' and 'Negative' does not matter if not 'Overwrite ZN'.
The output of 'Carry' and 'Overflow' does not matter if not 'Overwrite CV'.

SUB and RSUB has to be implemented by inverting the second / first operand, and setting carry in on the adder.

The zero flag is set when the result is zero.
The negative flag is set when the result is negative (the highest bit is set).

The carry flag is set when the adder for the ADD, SUB and RSUB operation carries.

The overflow flag is set when the optionally inverted operands (for subtraction) to the adder both have the same sign, and the output value has a different sign.
`)]
