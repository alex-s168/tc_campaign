def get_input($scratch_space: [Int], tick: Int, $inputs: [Int]) {

    inputs[0] = random(0xffffffff)

}

def check_output($scratch_space: [Int], tick: Int, inputs: [Int], outputs: [Int]) TestResult {

    let instruction     =  inputs[0]
    let ss              = (instruction >> 12) & 0b11
    let cccc            = (instruction >>  8) & 0b1111
    let ooo             = (instruction >>  5) & 0b111
    let rrr             = (instruction >>  2) & 0b111
    let mm              =  instruction        & 0b11
    let is_imm          = (instruction >> 14) & 0b1
    let imm_v           =  instruction        & 0b11111
    let disp            =  (instruction & 0xff) | (((instruction >> 12) & 0b1) << 8)
    let is_jmp               = (instruction >> 15) & 0b1

    if get_gate_score() > 0 || get_delay_score() > 0 {
        set_error(`The solution to this level must not have any gate and delay cost (use static indexers to solve the level).`)
        return fail
    }

    if outputs[0] != ss {
        set_error(`Operation Size should be {ss}.`)
        return fail
    }

    if outputs[1] != cccc {
        set_error(`OpCode / Jump Condition should be {cccc}.`)
        return fail
    }

    if outputs[2] != ooo {
        set_error(`Destination Register should be {ooo}.`)
        return fail
    }

    if outputs[3] != rrr {
        set_error(`Source Register should be {rrr}.`)
        return fail
    }

    if outputs[4] != mm {
        set_error(`Memory Addressing Mode should be {mm}.`)
        return fail
    }

    if outputs[5] != is_imm {
        set_error(`'Is immediate' should be {is_imm}.`)
        return fail
    }

    if outputs[6] != imm_v {
        set_error(`Immediate value should be {imm_v}.`)
        return fail
    }

    if outputs[7] != disp {
        set_error(`Jump Displacement should be {disp}.`)
        return fail
    }

    if outputs[8] != is_jmp {
        set_error(`'Is Jump' should be {is_jmp}.`)
        return fail
    }

    if tick == 0xffff {
        return win
    }

}
